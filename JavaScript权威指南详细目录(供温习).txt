JavaScript权威指南详细目录(供温习)
前言
第1章
	1.1 javascript语言核心
	1.2 客户端javascript
第一部分 javascript语言核心
第2章 词法结构
	2.1 字符集
		2.1.1 区分大小写
		2.1.2 空格、换行符和格式控制符
		2.1.3 Unicode转义序列
		2.1.4 标准化
	2.2 注释
	2.3 直接量
	2.4 标识符和保留字
	2.5 可选的分号
第3章 类型、值和变量
	3.1 数字
		3.1.1 整型直接量
		3.1.2 浮点型直接量
		3.1.3 JavaScript中的算术运算
		3.1.4 二进制浮点数和四舍五入错误
		3.1.5 日期和时间
	3.2 文本
		3.2.1 字符串直接量
		3.2.2 转义字符
		3.2.3 字符串的使用
		3.2.4 模式匹配
	3.3 布尔值
	3.4 null和undefined
	3.5 全局对象
	3.6 包装对象
	3.7 不可变的原始值和可变的对象引用
	3.8 类型转换
		3.8.1 转换和相等性
		3.8.2 显式类型转换
		3.8.3 对象转换为原始值
	3.9 变量声明
	3.10 变量作用域
		3.10.1 函数作用域和声明提前
		3.10.2 作为属性的变量
		3.10.3 作用域链
第4章 表达式和运算符
	4.1 原始表达式
	4.2 对象和数组的初始化表达式
	4.3 函数定义表达式
	4.4 属性访问表达式
	4.5 调用表达式
	4.6 对象创建表达式
	4.7 运算符概述
		4.7.1 操作数的个数
		4.7.2 操作数类型和结果类型
		4.7.3 左值
		4.7.4 运算符的副作用
		4.7.5 运算符优先级
		4.7.6 运算符的结合性
		4.7.7 运算顺序
	4.8 算术表达式
		4.8.1 “+”运算符
		4.8.2 一元算术运算符
		4.8.3 位运算符
	4.9 关系表达式
		4.9.1 相等和不等运算符
		4.9.2 比较运算符
		4.9.3 in运算符
		4.9.4 instanceof运算符
	4.10 逻辑表达式
		4.10.1 逻辑与（&&）
		4.10.2 逻辑或（||）
		4.10.3 逻辑非（!）
	4.11 赋值表达式
	4.12 表达式计算
		4.12.1 eval()
		4.12.2 全局eval()
		4.12.3 严格eval()
	4.13 其他运算符
		4.13.1 条件运算符(?:)
		4.13.2 typeof运算符
		4.13.3 delete运算符
		4.13.4 void运算符
		4.13.5 逗号运算符(,)
第5章 语句
	5.1 表达式语句
	5.2 复合语句和空语句
	5.3 声明语句
		5.3.1 var
		5.3.2 function
	5.4 条件语句
		5.4.1 if
		5.4.2 else if
		5.4.3 switch
	5.5 循环
		5.5.1 while
		5.5.2 do/while
		5.5.3 for
		5.5.4 for/in
	5.6 跳转
		5.6.1 标签语句
		5.6.2 break
		5.6.3 continue语句
		5.6.4 return语句
		5.6.5 throw语句
		5.6.6 try/catch/finally语句
	5.7 其他语句类型
		5.7.1 with语句
		5.7.2 debugger语句
		5.7.3 “use strict”
	5.8 javascript语句小结
第6章 对象
	6.1 创建对象
		6.1.1 对象直接量
		6.1.2 通过new创建对象
		6.1.3 原型
		6.1.4 Object.create()
	6.2 属性的查询和设置
		6.2.1 作为关联数组的对象
		6.2.2 继承
		6.2.3 属性访问错误
	6.3 删除属性
	6.4 检测属性
	6.5 枚举属性
	6.6 属性getter和setter
	6.7 属性的特性
	6.8 对象的三个属性
		6.8.1 原型属性
		6.8.2 类属性 --- 自定义classof() 函数实现，通过Object.prototype.toString.call()
			function Product(name, price) {
			  this.name = name;
			  this.price = price;
			}

			function Food(name, price) {
			  // Product.call(this, name, price);  --- 这行代码实际上就是下面两行代码，只是把Product函数里的this用Food里的this代替了
			  // 或者说function.call(thisArg,arg1,arg2) 里的thisArg就是函数运行时的this指向，参考MDN
			  this.name = name;
			  this.price = price;
			  this.category = 'food';
			}
			console.log(new Food('cheese', 5).name+' '+new Food('cheese', 5).price);  // "cheese 5"
		6.8.3 可扩展性 --- Object.isExtensible() / Object.preventExtensions() / Object.seal() / Object.isSealed() / Object.freeze() / Object.isFrozen()
	6.9 序列化对象 --- JSON.stringify() / JSON.parse()
	6.10 对象方法
		6.10.1 toString()方法
		6.10.2 toLocaleString()方法
		6.10.3 toJSON()方法
		6.10.4 valueOf()方法 
第7章 数组
	7.1 创建数组
	7.2 数组元素的读和写
	7.3 稀疏数组
	7.4 数组长度
	7.5 数组元素的添加和删除
	7.6 数组遍历
	7.7 多维数组
	7.8 数组方法
		7.8.1 join()
		7.8.2 reverse()
		7.8.3 sort()
		7.8.4 concat() --- 连接的是数组的元素不是数组本身，但是不会递归操作，如 [1,[2,3]]，连接的是1,[2,3],而不是 1,2,3,
		7.8.5 slice()
		7.8.6 splice() --- 插入的是数组本身，不是数组元素，如 splice(1,1,[2,3]),替换的索引1处为[2,3],而不是多了两个元素
		7.8.7 push() 和 pop()
		7.8.8 unshift() 和 shift()
		7.8.9 toString() 和 toLocaleString()
	7.9 ecmascript5中的数组方法
		7.9.1 forEach() --- 返回值undefined
		7.9.2 map() --- 返回处理过的数组
		7.9.3 filter() --- 返回过滤后的数组
		7.9.4 every() 和 some() --- 空数组调用前者返回true，调用后者返回false
		7.9.5 reduce() 和 reduceRight()
		7.9.6 indexOf() 和 lastIndexOf()
	7.10 数组类型
	7.11 类数组对象
	7.12 作为数组的字符串
第8章 函数
	8.1 函数定义 --- 含定义后立即调用
	8.2 函数调用
		8.2.1 函数调用
		8.2.2 方法调用
		8.2.3 构造函数调用
		8.2.4 间接调用
	8.3 函数的实参和形参
		8.3.1 可选形参
		8.3.2 可变长的实参列表：实参对象
		8.3.2 将对象属性用作实参
		8.3.4 实参类型
	8.4 作为值的函数
	8.5 作为命名空间的函数
	8.6 闭包
	8.7 函数属性、方法和构造函数
	8.8 函数式编程
第9章 类和模块
第10章 正则表达式的模式匹配
第11章 javascript的子集和扩展
第12章
第二部分
第13章
第14章
第15章
第16章
第17章
第18章
第19章
第20章
第21章
第22章
第三部分
第四部分